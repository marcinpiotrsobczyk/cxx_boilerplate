# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/C++.gitlab-ci.yml

# use the official gcc image, based on debian
# can use versions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/

image: cxx_boilerplate_image

variables:
  GIT_DEPTH: 7
  GIT_SUBMODULE_DEPTH: 3
  GIT_SUBMODULE_STRATEGY: "recursive"
  CI_DEBUG_SERVICES: "true"
  FF_NETWORK_PER_BUILD: "true"
stages:
  - build_base_image
  - build
  - test
  - deploy


build:
  stage:
    build
  needs: []
  script:
    - apt update && apt install -y git build-essential cmake libboost-all-dev
    - cmake -B build -D CMAKE_BUILD_TYPE=Debug
    - cmake --build build
  artifacts:
      name: "$CI_JOB_NAME"
      paths:
        - build/tests/example_test
        - build/tests/example2_test


example_test:
  stage:
    test
  script:
    - apt update && apt install python3 python-is-python3 pip -y
    - time build/tests/example_test --gtest_shuffle --gtest_repeat=10
    - time build/tests/example2_test
    - time external/gtest-parallel/gtest-parallel build/tests/example2_test --workers=$(nproc)
  dependencies: [build]


show_boost_version:
  stage:
    test
  script:
    - build/programs/tools/show_boost_version
  dependencies: [build]


clang_format:
  stage: test
  needs: []
  script:
    - apt update && apt install -y git build-essential cmake clang-format clang-tidy
    - find . -not \( -path ./external -prune \) -not \( -path ./libraries/appbase -prune \) -name "*.cpp" -o -name "*.cc" -o -name "*.h" -o -name "*.hpp"
    - find . -not \( -path ./external -prune \) -not \( -path ./libraries/appbase -prune \) -name "*.cpp" -o -name "*.cc" -o -name "*.h" -o -name "*.hpp" |
      xargs -n 1 clang-format -style=llvm --dry-run -Werror


cmakelint:
  stage: test
  needs: []
  script:
    - apt update && apt install python3 python-is-python3 pip -y
    - pip install --upgrade pip
    - pip install cmakelint
    - find . -not \( -path ./external -prune \) -not \( -path ./libraries/appbase -prune \) -name "CMakeLists.txt" | xargs -I {} cmakelint {}


example_service:
  stage:
    test
  needs: []
  services:
    - name: postgres
      alias: db
  variables:
    POSTGRES_DB: custom_db
    POSTGRES_USER: custom_user
    POSTGRES_PASSWORD: custom_pass
  script:
    - apt update && apt install python3 python-is-python3 pip -y
    - pip install --upgrade pip
    - pip install "psycopg[binary,pool]"
    - pip install pgcli
    - echo "SELECT VERSION();" | pgcli "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432/$POSTGRES_DB"


bind_build_cxx_boilerplate_image:
  stage: build_base_image
  image: docker:23.0.6
  rules:
    - when: manual
  script:
    - apk add bash git
    - $CI_PROJECT_DIR/scripts/build_ci_base_image.sh $CI_COMMIT_SHA 
    - $CI_PROJECT_DIR/scripts/export-binaries.sh cxx_boilerplate_image:$CI_COMMIT_SHA $CI_PROJECT_DIR/build
    - docker builder prune --force
  artifacts:
      name: "$CI_JOB_NAME"
      paths:
        - build
